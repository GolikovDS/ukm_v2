

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Thu Jul 19 14:05:02 2018

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F883
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	text531,local,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	text532,local,class=CODE,delta=2
    13                           	psect	text540,local,class=CODE,delta=2
    14                           	psect	text543,local,class=CODE,delta=2
    15                           	psect	text544,local,class=CODE,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	swtext1,local,class=CONST,delta=2
    18                           	psect	text545,local,class=CODE,delta=2
    19                           	psect	pa_nodes,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  000A                     	;#
    22                           
    23                           	psect	config
    24  2007  2BB4               	dw	11188	;#
    25  2008  3FFF               	dw	16383	;#
    26                           
    27                           	psect	text531
    28  0000                     __ptext531:	
    29  001F                     _ADCON0	set	31
    30  001E                     _ADRESH	set	30
    31  000B                     _INTCON	set	11
    32  0005                     _PORTA	set	5
    33  0006                     _PORTB	set	6
    34  0006                     _PORTBbits	set	6
    35  0007                     _PORTC	set	7
    36  0013                     _SSPBUF	set	19
    37  0014                     _SSPCON	set	20
    38  0001                     _TMR0	set	1
    39  00F8                     _ADON	set	248
    40  005F                     _GIE	set	95
    41  00F9                     _GO	set	249
    42  0059                     _INTF	set	89
    43  002F                     _RA7	set	47
    44  0030                     _RB0	set	48
    45  0031                     _RB1	set	49
    46  0032                     _RB2	set	50
    47  0033                     _RB3	set	51
    48  0063                     _SSPIF	set	99
    49  00A6                     _SSPOV	set	166
    50  005A                     _T0IF	set	90
    51  009F                     _ADCON1	set	159
    52  009E                     _ADRESL	set	158
    53  0096                     _IOCB	set	150
    54  0081                     _OPTION_REG	set	129
    55  008F                     _OSCCON	set	143
    56  0093                     _SSPADD	set	147
    57  0091                     _SSPCON2	set	145
    58  0094                     _SSPSTAT	set	148
    59  0085                     _TRISA	set	133
    60  0086                     _TRISB	set	134
    61  0087                     _TRISC	set	135
    62  0095                     _WPUB	set	149
    63  048D                     _ACKDT	set	1165
    64  048C                     _ACKEN	set	1164
    65  048E                     _ACKSTAT	set	1166
    66  04A0                     _BF	set	1184
    67  048A                     _PEN	set	1162
    68  048B                     _RCEN	set	1163
    69  0488                     _SEN	set	1160
    70  0188                     _ANSEL	set	392
    71  0189                     _ANSELH	set	393
    72                           
    73                           	psect	cinit
    74  0298                     start_initialization:	
    75                           
    76                           ; Clear objects allocated to COMMON
    77  0298  01F8               	clrf	__pbssCOMMON& (0+127)
    78  0299  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
    79                           
    80                           ; Clear objects allocated to BANK0
    81  029A  01AC               	clrf	__pbssBANK0& (0+127)
    82  029B  01AD               	clrf	(__pbssBANK0+1)& (0+127)
    83  029C  01AE               	clrf	(__pbssBANK0+2)& (0+127)
    84  029D  01AF               	clrf	(__pbssBANK0+3)& (0+127)
    85  029E  01B0               	clrf	(__pbssBANK0+4)& (0+127)
    86  029F  01B1               	clrf	(__pbssBANK0+5)& (0+127)
    87  02A0  01B2               	clrf	(__pbssBANK0+6)& (0+127)
    88  02A1  01B3               	clrf	(__pbssBANK0+7)& (0+127)
    89  02A2  01B4               	clrf	(__pbssBANK0+8)& (0+127)
    90  02A3  01B5               	clrf	(__pbssBANK0+9)& (0+127)
    91  02A4  01B6               	clrf	(__pbssBANK0+10)& (0+127)
    92  02A5                     end_of_initialization:	
    93                           ;End of C runtime variable initialization code
    94                           
    95  02A5  0183               	clrf	3
    96  02A6  118A  2A28         	ljmp	_main	;jump to C main() function
    97                           
    98                           	psect	bssCOMMON
    99  0078                     __pbssCOMMON:	
   100  0078                     _uSecond:	
   101  0078                     	ds	2
   102                           
   103                           	psect	bssBANK0
   104  002C                     __pbssBANK0:	
   105  002C                     _counti2cloop:	
   106  002C                     	ds	2
   107  002E                     _minute:	
   108  002E                     	ds	2
   109  0030                     _second:	
   110  0030                     	ds	2
   111  0032                     _status:	
   112  0032                     	ds	1
   113  0033                     _DeviceData:	
   114  0033                     	ds	4
   115                           
   116                           	psect	cstackCOMMON
   117  0071                     __pcstackCOMMON:	
   118  0071                     ?_pushByte:	
   119  0071                     ?_CheckSspif:	
   120                           ; 0 bytes @ 0x0
   121                           
   122  0071                     ?_init:	
   123                           ; 0 bytes @ 0x0
   124                           
   125  0071                     ?_clock:	
   126                           ; 0 bytes @ 0x0
   127                           
   128  0071                     ??_clock:	
   129                           ; 0 bytes @ 0x0
   130                           
   131  0071                     ?_adcRestart:	
   132                           ; 0 bytes @ 0x0
   133                           
   134  0071                     ?_getExternalAdc:	
   135                           ; 1 bytes @ 0x0
   136                           
   137  0071                     ?_i2cStart:	
   138                           ; 1 bytes @ 0x0
   139                           
   140  0071                     ?_i2cPutByte:	
   141                           ; 1 bytes @ 0x0
   142                           
   143  0071                     ?_i2cStop:	
   144                           ; 1 bytes @ 0x0
   145                           
   146  0071                     ?_i2cGetByte:	
   147                           ; 1 bytes @ 0x0
   148                           
   149  0071                     ?_breakToLoop:	
   150                           ; 1 bytes @ 0x0
   151                           
   152                           
   153                           ; 1 bytes @ 0x0
   154  0071                     	ds	3
   155  0074                     ??_pushByte:	
   156  0074                     ??_i2cStart:	
   157                           ; 0 bytes @ 0x3
   158                           
   159  0074                     ??_i2cPutByte:	
   160                           ; 0 bytes @ 0x3
   161                           
   162  0074                     ??_i2cStop:	
   163                           ; 0 bytes @ 0x3
   164                           
   165  0074                     ??_i2cGetByte:	
   166                           ; 0 bytes @ 0x3
   167                           
   168  0074                     ??_CheckSspif:	
   169                           ; 0 bytes @ 0x3
   170                           
   171  0074                     ??_breakToLoop:	
   172                           ; 0 bytes @ 0x3
   173                           
   174  0074                     ?_i2cAddress:	
   175                           ; 0 bytes @ 0x3
   176                           
   177  0074                     ?_getAdc:	
   178                           ; 1 bytes @ 0x3
   179                           
   180  0074                     i2cAddress@address:	
   181                           ; 2 bytes @ 0x3
   182                           
   183                           
   184                           ; 1 bytes @ 0x3
   185  0074                     	ds	1
   186  0075                     ??_i2cAddress:	
   187  0075                     pushByte@b:	
   188                           ; 0 bytes @ 0x4
   189                           
   190  0075                     i2cPutByte@bytes:	
   191                           ; 1 bytes @ 0x4
   192                           
   193  0075                     i2cGetByte@ack:	
   194                           ; 1 bytes @ 0x4
   195                           
   196                           
   197                           ; 1 bytes @ 0x4
   198  0075                     	ds	1
   199  0076                     ??_getAdc:	
   200  0076                     i2cAddress@w_r:	
   201                           ; 0 bytes @ 0x5
   202                           
   203  0076                     i2cGetByte@data:	
   204                           ; 1 bytes @ 0x5
   205                           
   206  0076                     pushByte@i:	
   207                           ; 1 bytes @ 0x5
   208                           
   209                           
   210                           ; 2 bytes @ 0x5
   211  0076                     	ds	1
   212  0077                     ??_adcRestart:	
   213  0077                     ??_getExternalAdc:	
   214                           ; 0 bytes @ 0x6
   215                           
   216  0077                     ??_init:	
   217                           ; 0 bytes @ 0x6
   218                           
   219                           
   220                           ; 0 bytes @ 0x6
   221  0077                     	ds	1
   222                           
   223                           	psect	cstackBANK0
   224  0020                     __pcstackBANK0:	
   225  0020                     getExternalAdc@outData:	
   226                           
   227                           ; 1 bytes @ 0x0
   228  0020                     	ds	1
   229  0021                     getExternalAdc@data:	
   230                           
   231                           ; 3 bytes @ 0x1
   232  0021                     	ds	3
   233  0024                     ?_main:	
   234  0024                     main@argc:	
   235                           ; 2 bytes @ 0x4
   236                           
   237                           
   238                           ; 2 bytes @ 0x4
   239  0024                     	ds	2
   240  0026                     main@argv:	
   241                           
   242                           ; 2 bytes @ 0x6
   243  0026                     	ds	2
   244  0028                     ??_main:	
   245                           
   246                           ; 0 bytes @ 0x8
   247  0028                     	ds	2
   248  002A                     main@i:	
   249                           
   250                           ; 2 bytes @ 0xA
   251  002A                     	ds	2
   252                           
   253                           	psect	maintext
   254  0228                     __pmaintext:	
   255 ;;Data sizes: Strings 0, constant 0, data 0, bss 13, persistent 0 stack 0
   256 ;;Auto spaces:   Size  Autos    Used
   257 ;; COMMON          13      7       9
   258 ;; BANK0           80     12      23
   259 ;; BANK1           80      0       0
   260 ;; BANK2           69      0       0
   261 ;;
   262 ;; Pointer list with targets:
   263 ;; ?_getAdc	unsigned int  size(1) Largest target is 0
   264 ;;
   265 ;; getExternalAdc@outData	PTR unsigned int  size(1) Largest target is 4
   266 ;;		 -> DeviceData(BANK0[4]), 
   267 ;;
   268 ;;
   269 ;; Critical Paths under _main in COMMON
   270 ;;
   271 ;;   _main->_pushByte
   272 ;;   _getExternalAdc->_i2cAddress
   273 ;;   _getExternalAdc->_i2cGetByte
   274 ;;   _adcRestart->_i2cAddress
   275 ;;
   276 ;; Critical Paths under _clock in COMMON
   277 ;;
   278 ;;   None.
   279 ;;
   280 ;; Critical Paths under _main in BANK0
   281 ;;
   282 ;;   _main->_getExternalAdc
   283 ;;
   284 ;; Critical Paths under _clock in BANK0
   285 ;;
   286 ;;   None.
   287 ;;
   288 ;; Critical Paths under _main in BANK1
   289 ;;
   290 ;;   None.
   291 ;;
   292 ;; Critical Paths under _clock in BANK1
   293 ;;
   294 ;;   None.
   295 ;;
   296 ;; Critical Paths under _main in BANK2
   297 ;;
   298 ;;   None.
   299 ;;
   300 ;; Critical Paths under _clock in BANK2
   301 ;;
   302 ;;   None.
   303 ;;
   304 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   305 ;;
   306 ;;
   307 ;;Call Graph Tables:
   308 ;;
   309 ;; ---------------------------------------------------------------------------------
   310 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   311 ;; ---------------------------------------------------------------------------------
   312 ;; (0) _main                                                 8     4      4     564
   313 ;;                                              4 BANK0      8     4      4
   314 ;;                               _init
   315 ;;                             _getAdc
   316 ;;                     _getExternalAdc
   317 ;;                           _pushByte
   318 ;; ---------------------------------------------------------------------------------
   319 ;; (1) _init                                                 0     0      0      93
   320 ;;                         _adcRestart
   321 ;; ---------------------------------------------------------------------------------
   322 ;; (1) _getExternalAdc                                       4     4      0     334
   323 ;;                                              0 BANK0      4     4      0
   324 ;;                           _i2cStart
   325 ;;                         _i2cAddress
   326 ;;                         _i2cPutByte
   327 ;;                            _i2cStop
   328 ;;                         _i2cGetByte
   329 ;; ---------------------------------------------------------------------------------
   330 ;; (2) _adcRestart                                           0     0      0      93
   331 ;;                           _i2cStart
   332 ;;                         _i2cAddress
   333 ;;                         _i2cPutByte
   334 ;;                            _i2cStop
   335 ;; ---------------------------------------------------------------------------------
   336 ;; (2) _i2cGetByte                                           3     3      0      65
   337 ;;                                              3 COMMON     3     3      0
   338 ;;                        _breakToLoop
   339 ;;                         _CheckSspif
   340 ;; ---------------------------------------------------------------------------------
   341 ;; (2) _i2cStop                                              0     0      0       0
   342 ;;                        _breakToLoop
   343 ;;                         _CheckSspif
   344 ;; ---------------------------------------------------------------------------------
   345 ;; (2) _i2cPutByte                                           2     2      0      31
   346 ;;                                              3 COMMON     2     2      0
   347 ;;                        _breakToLoop
   348 ;;                         _CheckSspif
   349 ;; ---------------------------------------------------------------------------------
   350 ;; (2) _i2cAddress                                           3     2      1      62
   351 ;;                                              3 COMMON     3     2      1
   352 ;;                        _breakToLoop
   353 ;;                         _CheckSspif
   354 ;; ---------------------------------------------------------------------------------
   355 ;; (2) _i2cStart                                             1     1      0       0
   356 ;;                                              3 COMMON     1     1      0
   357 ;;                        _breakToLoop
   358 ;;                         _CheckSspif
   359 ;; ---------------------------------------------------------------------------------
   360 ;; (1) _pushByte                                             4     4      0      69
   361 ;;                                              3 COMMON     4     4      0
   362 ;; ---------------------------------------------------------------------------------
   363 ;; (3) _CheckSspif                                           0     0      0       0
   364 ;; ---------------------------------------------------------------------------------
   365 ;; (3) _breakToLoop                                          0     0      0       0
   366 ;; ---------------------------------------------------------------------------------
   367 ;; (1) _getAdc                                               2     0      2       0
   368 ;;                                              3 COMMON     2     0      2
   369 ;; ---------------------------------------------------------------------------------
   370 ;; Estimated maximum stack depth 3
   371 ;; ---------------------------------------------------------------------------------
   372 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   373 ;; ---------------------------------------------------------------------------------
   374 ;; (5) _clock                                                3     3      0       0
   375 ;;                                              0 COMMON     3     3      0
   376 ;; ---------------------------------------------------------------------------------
   377 ;; Estimated maximum stack depth 5
   378 ;; ---------------------------------------------------------------------------------
   379 ;; Call Graph Graphs:
   380 ;; _main (ROOT)
   381 ;;   _init
   382 ;;     _adcRestart
   383 ;;       _i2cStart
   384 ;;         _breakToLoop
   385 ;;         _CheckSspif
   386 ;;       _i2cAddress
   387 ;;         _breakToLoop
   388 ;;         _CheckSspif
   389 ;;       _i2cPutByte
   390 ;;         _breakToLoop
   391 ;;         _CheckSspif
   392 ;;       _i2cStop
   393 ;;         _breakToLoop
   394 ;;         _CheckSspif
   395 ;;   _getAdc
   396 ;;   _getExternalAdc
   397 ;;     _i2cStart
   398 ;;       _breakToLoop
   399 ;;       _CheckSspif
   400 ;;     _i2cAddress
   401 ;;       _breakToLoop
   402 ;;       _CheckSspif
   403 ;;     _i2cPutByte
   404 ;;       _breakToLoop
   405 ;;       _CheckSspif
   406 ;;     _i2cStop
   407 ;;       _breakToLoop
   408 ;;       _CheckSspif
   409 ;;     _i2cGetByte
   410 ;;       _breakToLoop
   411 ;;       _CheckSspif
   412 ;;   _pushByte
   413 ;;
   414 ;; _clock (ROOT)
   415 ;;
   416 ;; Address spaces:
   417 ;;Name               Size   Autos  Total    Cost      Usage
   418 ;;BITCOMMON            D      0       0       0        0.0%
   419 ;;EEDATA             100      0       0       0        0.0%
   420 ;;NULL                 0      0       0       0        0.0%
   421 ;;CODE                 0      0       0       0        0.0%
   422 ;;COMMON               D      7       9       1       69.2%
   423 ;;BITSFR0              0      0       0       1        0.0%
   424 ;;SFR0                 0      0       0       1        0.0%
   425 ;;BITSFR1              0      0       0       2        0.0%
   426 ;;SFR1                 0      0       0       2        0.0%
   427 ;;STACK                0      0       4       2        0.0%
   428 ;;BANK0               50      C      17       3       28.8%
   429 ;;BITSFR3              0      0       0       4        0.0%
   430 ;;SFR3                 0      0       0       4        0.0%
   431 ;;ABS                  0      0      20       4        0.0%
   432 ;;BITBANK0            50      0       0       5        0.0%
   433 ;;BITSFR2              0      0       0       5        0.0%
   434 ;;SFR2                 0      0       0       5        0.0%
   435 ;;BITBANK1            50      0       0       6        0.0%
   436 ;;BANK1               50      0       0       7        0.0%
   437 ;;BITBANK2            45      0       0       8        0.0%
   438 ;;BANK2               45      0       0       9        0.0%
   439 ;;DATA                 0      0      24      10        0.0%
   440                           
   441                           
   442 ;; *************** function _main *****************
   443 ;; Defined at:
   444 ;;		line 53 in file "main.c"
   445 ;; Parameters:    Size  Location     Type
   446 ;;  argc            2    4[BANK0 ] int 
   447 ;;  argv            2    6[BANK0 ] PTR PTR unsigned char 
   448 ;; Auto vars:     Size  Location     Type
   449 ;;  i               2   10[BANK0 ] int 
   450 ;; Return value:  Size  Location     Type
   451 ;;                  2    4[BANK0 ] int 
   452 ;; Registers used:
   453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   454 ;; Tracked objects:
   455 ;;		On entry : 17F/0
   456 ;;		On exit  : 0/0
   457 ;;		Unchanged: 0/0
   458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   459 ;;      Params:         0       4       0       0
   460 ;;      Locals:         0       2       0       0
   461 ;;      Temps:          0       2       0       0
   462 ;;      Totals:         0       8       0       0
   463 ;;Total ram usage:        8 bytes
   464 ;; Hardware stack levels required when called:    5
   465 ;; This function calls:
   466 ;;		_init
   467 ;;		_getAdc
   468 ;;		_getExternalAdc
   469 ;;		_pushByte
   470 ;; This function is called by:
   471 ;;		Startup code after reset
   472 ;; This function uses a non-reentrant model
   473 ;;
   474  0228                     _main:	
   475                           
   476                           ;main.c: 55: init();
   477                           
   478                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   479  0228  118A  200F  118A   	fcall	_init
   480                           
   481                           ;main.c: 56: GIE = 1;
   482  022B  178B               	bsf	11,7
   483                           
   484                           ;main.c: 57: status = 1;
   485  022C  1283               	bcf	3,5	;RP0=0, select bank0
   486  022D  1303               	bcf	3,6	;RP1=0, select bank0
   487  022E  01B2               	clrf	_status
   488  022F  0AB2               	incf	_status,f
   489                           
   490                           ;main.c: 58: RA7 = 1;
   491  0230  1785               	bsf	5,7
   492  0231                     l8326:	
   493                           
   494                           ;main.c: 61: for(int i = 0; i < 20; i++)
   495  0231  1283               	bcf	3,5	;RP0=0, select bank0
   496  0232  1303               	bcf	3,6	;RP1=0, select bank0
   497  0233  01AA               	clrf	main@i
   498  0234  01AB               	clrf	main@i+1
   499  0235                     l8332:	
   500                           
   501                           ;main.c: 62: _delay((unsigned long)((20)*(4000000/4000.0)));
   502  0235  301A               	movlw	26
   503  0236  1283               	bcf	3,5	;RP0=0, select bank0
   504  0237  1303               	bcf	3,6	;RP1=0, select bank0
   505  0238  00A9               	movwf	??_main+1
   506  0239  30F8               	movlw	248
   507  023A  00A8               	movwf	??_main
   508  023B                     u1217:	
   509  023B  0BA8               	decfsz	??_main,f
   510  023C  2A3B               	goto	u1217
   511  023D  0BA9               	decfsz	??_main+1,f
   512  023E  2A3B               	goto	u1217
   513  023F  0064               	clrwdt
   514  0240  1283               	bcf	3,5	;RP0=0, select bank0
   515  0241  1303               	bcf	3,6	;RP1=0, select bank0
   516  0242  0AAA               	incf	main@i,f
   517  0243  1903               	skipnz
   518  0244  0AAB               	incf	main@i+1,f
   519  0245  082B               	movf	main@i+1,w
   520  0246  3A80               	xorlw	128
   521  0247  00FF               	movwf	127
   522  0248  3080               	movlw	128
   523  0249  027F               	subwf	127,w
   524  024A  1D03               	skipz
   525  024B  2A4E               	goto	u1205
   526  024C  3014               	movlw	20
   527  024D  022A               	subwf	main@i,w
   528  024E                     u1205:	
   529  024E  1C03               	skipc
   530  024F  2A35               	goto	l8332
   531                           
   532                           ;main.c: 65: DeviceData.innerAdc.value = getAdc();
   533  0250  118A  22B8  118A   	fcall	_getAdc
   534  0253  0875               	movf	?_getAdc+1,w
   535  0254  1283               	bcf	3,5	;RP0=0, select bank0
   536  0255  00B6               	movwf	_DeviceData+3
   537  0256  0874               	movf	?_getAdc,w
   538  0257  00B5               	movwf	_DeviceData+2
   539                           
   540                           ;main.c: 67: getExternalAdc(&DeviceData.externalAdc.value);
   541  0258  3033               	movlw	_DeviceData& (0+255)
   542  0259  118A  2079  118A   	fcall	_getExternalAdc
   543                           
   544                           ;main.c: 68: pushByte(DeviceData.externalAdc.toByte[0]);
   545  025C  1283               	bcf	3,5	;RP0=0, select bank0
   546  025D  1303               	bcf	3,6	;RP1=0, select bank0
   547  025E  0833               	movf	_DeviceData,w
   548  025F  118A  2269  118A   	fcall	_pushByte
   549                           
   550                           ;main.c: 69: pushByte(DeviceData.externalAdc.toByte[1]);
   551  0262  1283               	bcf	3,5	;RP0=0, select bank0
   552  0263  1303               	bcf	3,6	;RP1=0, select bank0
   553  0264  0834               	movf	_DeviceData+1,w
   554  0265  118A  2269  118A   	fcall	_pushByte
   555  0268  2A31               	goto	l8326
   556  0269                     __end_of_main:	
   557                           
   558                           	psect	text532
   559  000F                     __ptext532:	
   560 ;; =============== function _main ends ============
   561                           
   562                           
   563 ;; *************** function _init *****************
   564 ;; Defined at:
   565 ;;		line 21 in file "main.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;		None
   568 ;; Auto vars:     Size  Location     Type
   569 ;;		None
   570 ;; Return value:  Size  Location     Type
   571 ;;		None               void
   572 ;; Registers used:
   573 ;;		wreg, status,2, status,0, pclath, cstack
   574 ;; Tracked objects:
   575 ;;		On entry : 17F/0
   576 ;;		On exit  : 0/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   579 ;;      Params:         0       0       0       0
   580 ;;      Locals:         0       0       0       0
   581 ;;      Temps:          0       0       0       0
   582 ;;      Totals:         0       0       0       0
   583 ;;Total ram usage:        0 bytes
   584 ;; Hardware stack levels used:    1
   585 ;; Hardware stack levels required when called:    4
   586 ;; This function calls:
   587 ;;		_adcRestart
   588 ;; This function is called by:
   589 ;;		_main
   590 ;; This function uses a non-reentrant model
   591 ;;
   592  000F                     _init:	
   593                           
   594                           ;main.c: 22: TRISA = 0b01111111;
   595                           
   596                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
   597  000F  307F               	movlw	127
   598  0010  1683               	bsf	3,5	;RP0=1, select bank1
   599  0011  0085               	movwf	5	;volatile
   600                           
   601                           ;main.c: 23: TRISB = 0b00010000;
   602  0012  3010               	movlw	16
   603  0013  0086               	movwf	6	;volatile
   604                           
   605                           ;main.c: 24: TRISC = 0b11011000;
   606  0014  30D8               	movlw	216
   607  0015  0087               	movwf	7	;volatile
   608                           
   609                           ;main.c: 25: PORTA = 0b00000000;
   610  0016  1283               	bcf	3,5	;RP0=0, select bank0
   611  0017  0185               	clrf	5	;volatile
   612                           
   613                           ;main.c: 26: PORTB = 0b00000000;
   614  0018  0186               	clrf	6	;volatile
   615                           
   616                           ;main.c: 27: PORTC = 0b00000000;
   617  0019  0187               	clrf	7	;volatile
   618                           
   619                           ;main.c: 29: ANSELH = 0;
   620  001A  1683               	bsf	3,5	;RP0=1, select bank3
   621  001B  1703               	bsf	3,6	;RP1=1, select bank3
   622  001C  0189               	clrf	9	;volatile
   623                           
   624                           ;main.c: 30: WPUB = 1;
   625  001D  3001               	movlw	1
   626  001E  1303               	bcf	3,6	;RP1=0, select bank1
   627  001F  0095               	movwf	21	;volatile
   628                           
   629                           ;main.c: 31: IOCB = 0;
   630  0020  0196               	clrf	22	;volatile
   631                           
   632                           ;main.c: 32: ANSEL = 1;
   633  0021  1703               	bsf	3,6	;RP1=1, select bank3
   634  0022  0088               	movwf	8	;volatile
   635                           
   636                           ;main.c: 34: ADCON0 = 0b10000001;
   637  0023  3081               	movlw	129
   638  0024  1283               	bcf	3,5	;RP0=0, select bank0
   639  0025  1303               	bcf	3,6	;RP1=0, select bank0
   640  0026  009F               	movwf	31	;volatile
   641                           
   642                           ;main.c: 35: ADCON1 = 0b10110000;
   643  0027  30B0               	movlw	176
   644  0028  1683               	bsf	3,5	;RP0=1, select bank1
   645  0029  009F               	movwf	31	;volatile
   646                           
   647                           ;main.c: 36: ADON=1;
   648  002A  1283               	bcf	3,5	;RP0=0, select bank0
   649  002B  3065               	movlw	101
   650  002C  141F               	bsf	31,0
   651                           
   652                           ;main.c: 38: OSCCON = 0b01100101;
   653  002D  1683               	bsf	3,5	;RP0=1, select bank1
   654  002E  008F               	movwf	15	;volatile
   655                           
   656                           ;main.c: 39: OPTION_REG = 0b10000101;
   657  002F  3085               	movlw	133
   658  0030  0081               	movwf	1	;volatile
   659                           
   660                           ;main.c: 41: INTCON = 0b00100000;
   661  0031  3020               	movlw	32
   662  0032  008B               	movwf	11	;volatile
   663  0033  3060               	movlw	96
   664                           
   665                           ;main.c: 43: GIE = 0;
   666  0034  138B               	bcf	11,7
   667                           
   668                           ;main.c: 44: TMR0 = 96;
   669  0035  1283               	bcf	3,5	;RP0=0, select bank0
   670  0036  0081               	movwf	1	;volatile
   671                           
   672                           ;main.c: 46: SSPADD = 103;
   673  0037  3067               	movlw	103
   674  0038  1683               	bsf	3,5	;RP0=1, select bank1
   675  0039  0093               	movwf	19	;volatile
   676                           
   677                           ;main.c: 47: SSPIF = 0;
   678  003A  1283               	bcf	3,5	;RP0=0, select bank0
   679  003B  118C               	bcf	12,3
   680                           
   681                           ;main.c: 48: SSPSTAT = 0b00000000;
   682  003C  1683               	bsf	3,5	;RP0=1, select bank1
   683  003D  0194               	clrf	20	;volatile
   684                           
   685                           ;main.c: 49: SSPCON = 0b00111000;
   686  003E  3038               	movlw	56
   687  003F  1283               	bcf	3,5	;RP0=0, select bank0
   688  0040  0094               	movwf	20	;volatile
   689                           
   690                           ;main.c: 50: SSPCON2 = 0b00000000;
   691  0041  1683               	bsf	3,5	;RP0=1, select bank1
   692  0042  0191               	clrf	17	;volatile
   693                           
   694                           ;main.c: 51: adcRestart();
   695  0043  2844               	ljmp	l8246
   696  0044                     __end_of_init:	
   697  0044                     __ptext534:	
   698 ;; =============== function _getExternalAdc ends ============
   699                           
   700                           
   701 ;; *************** function _adcRestart *****************
   702 ;; Defined at:
   703 ;;		line 52 in file "adc.c"
   704 ;; Parameters:    Size  Location     Type
   705 ;;		None
   706 ;; Auto vars:     Size  Location     Type
   707 ;;		None
   708 ;; Return value:  Size  Location     Type
   709 ;;                  1    wreg      unsigned char 
   710 ;; Registers used:
   711 ;;		wreg, status,2, status,0, pclath, cstack
   712 ;; Tracked objects:
   713 ;;		On entry : 17F/20
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   717 ;;      Params:         0       0       0       0
   718 ;;      Locals:         0       0       0       0
   719 ;;      Temps:          0       0       0       0
   720 ;;      Totals:         0       0       0       0
   721 ;;Total ram usage:        0 bytes
   722 ;; Hardware stack levels used:    1
   723 ;; Hardware stack levels required when called:    3
   724 ;; This function calls:
   725 ;;		_i2cStart
   726 ;;		_i2cAddress
   727 ;;		_i2cPutByte
   728 ;;		_i2cStop
   729 ;; This function is called by:
   730 ;;		_init
   731 ;; This function uses a non-reentrant model
   732 ;;
   733  0044                     _adcRestart:	
   734  0044                     l8246:	
   735                           ; Regs used in _adcRestart: [wreg+status,2+status,0+pclath+cstack]
   736                           
   737                           
   738                           ;adc.c: 53: i2cStart();
   739  0044  20F3  118A         	fcall	_i2cStart
   740                           
   741                           ;adc.c: 54: if(i2cAddress(0, 0b1101000) == 27)
   742  0046  3068               	movlw	104
   743  0047  00F4               	movwf	?_i2cAddress
   744  0048  3000               	movlw	0
   745  0049  2116  118A         	fcall	_i2cAddress
   746  004B  3A1B               	xorlw	27
   747  004C  1903               	btfsc	3,2
   748  004D  0008               	return
   749                           
   750                           ;adc.c: 56: if(i2cPutByte (0x06) == 27)
   751  004E  3006               	movlw	6
   752  004F  2055  118A         	fcall	_i2cPutByte
   753  0051  3A1B               	xorlw	27
   754  0052  1903               	btfsc	3,2
   755  0053  0008               	return
   756                           
   757                           ;adc.c: 58: i2cStop();
   758  0054  293C               	ljmp	l8192
   759  0055                     __end_of_adcRestart:	
   760  0055                     __ptext537:	
   761 ;; =============== function _i2cStop ends ============
   762                           
   763                           
   764 ;; *************** function _i2cPutByte *****************
   765 ;; Defined at:
   766 ;;		line 126 in file "i2c.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;  bytes           1    wreg     unsigned char 
   769 ;; Auto vars:     Size  Location     Type
   770 ;;  bytes           1    4[COMMON] unsigned char 
   771 ;; Return value:  Size  Location     Type
   772 ;;                  1    wreg      unsigned char 
   773 ;; Registers used:
   774 ;;		wreg, status,2, status,0, pclath, cstack
   775 ;; Tracked objects:
   776 ;;		On entry : 40/0
   777 ;;		On exit  : 40/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   780 ;;      Params:         0       0       0       0
   781 ;;      Locals:         1       0       0       0
   782 ;;      Temps:          1       0       0       0
   783 ;;      Totals:         2       0       0       0
   784 ;;Total ram usage:        2 bytes
   785 ;; Hardware stack levels used:    1
   786 ;; Hardware stack levels required when called:    2
   787 ;; This function calls:
   788 ;;		_breakToLoop
   789 ;;		_CheckSspif
   790 ;; This function is called by:
   791 ;;		_getExternalAdc
   792 ;;		_adcRestart
   793 ;; This function uses a non-reentrant model
   794 ;;
   795  0055                     _i2cPutByte:	
   796                           
   797                           ; Regs used in _i2cPutByte: [wreg+status,2+status,0+pclath+cstack]
   798                           ;i2cPutByte@bytes stored from wreg
   799  0055  00F5               	movwf	i2cPutByte@bytes
   800                           
   801                           ;i2c.c: 127: counti2cloop = 0;
   802  0056  1283               	bcf	3,5	;RP0=0, select bank0
   803  0057  01AC               	clrf	_counti2cloop
   804  0058  01AD               	clrf	_counti2cloop+1
   805                           
   806                           ;i2c.c: 128: SSPBUF = bytes;
   807  0059  0875               	movf	i2cPutByte@bytes,w
   808  005A  0093               	movwf	19	;volatile
   809  005B                     l6013:	
   810                           ;i2c.c: 129: while( BF ) {
   811                           
   812  005B  1683               	bsf	3,5	;RP0=1, select bank1
   813  005C  1C14               	btfss	20,0
   814  005D  286B               	goto	l8178
   815                           
   816                           ;i2c.c: 130: counti2cloop++;
   817  005E  1283               	bcf	3,5	;RP0=0, select bank0
   818  005F  0AAC               	incf	_counti2cloop,f
   819  0060  1903               	skipnz
   820  0061  0AAD               	incf	_counti2cloop+1,f
   821                           
   822                           ;i2c.c: 131: if ( breakToLoop () == 27 ){
   823  0062  20EB  118A         	fcall	_breakToLoop
   824  0064  3A1B               	xorlw	27
   825  0065  1D03               	skipz
   826  0066  285B               	goto	l6013
   827  0067  301B               	movlw	27
   828                           
   829                           ;i2c.c: 132: counti2cloop = 0;
   830  0068  01AC               	clrf	_counti2cloop
   831  0069  01AD               	clrf	_counti2cloop+1
   832                           
   833                           ;i2c.c: 133: return 27;
   834  006A  0008               	return
   835  006B                     l8178:	
   836                           
   837                           ;i2c.c: 134: }
   838                           ;i2c.c: 135: }
   839                           ;i2c.c: 136: CheckSspif();
   840  006B  2112  118A         	fcall	_CheckSspif
   841                           
   842                           ;i2c.c: 137: _delay((unsigned long)((1)*(4000000/4000.0)));
   843  006D  30F9               	movlw	249
   844  006E  00F4               	movwf	??_i2cPutByte
   845  006F                     u1237:	
   846  006F  0064               	clrwdt
   847  0070  0BF4               	decfsz	??_i2cPutByte,f
   848  0071  286F               	goto	u1237
   849  0072  2873               	nop2	;nop
   850  0073  0064               	clrwdt
   851                           
   852                           ;i2c.c: 138: if (ACKSTAT == 0)
   853  0074  1683               	bsf	3,5	;RP0=1, select bank1
   854  0075  1303               	bcf	3,6	;RP1=0, select bank1
   855  0076  1F11               	btfss	17,6
   856                           
   857                           ;i2c.c: 139: return 1;
   858  0077  3401               	retlw	1
   859                           
   860                           ;i2c.c: 140: return 0;
   861  0078  3400               	retlw	0
   862  0079                     __end_of_i2cPutByte:	
   863  0079                     __ptext533:	
   864 ;; =============== function _init ends ============
   865                           
   866                           
   867 ;; *************** function _getExternalAdc *****************
   868 ;; Defined at:
   869 ;;		line 28 in file "adc.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;  outData         1    wreg     PTR unsigned int 
   872 ;;		 -> DeviceData(4), 
   873 ;; Auto vars:     Size  Location     Type
   874 ;;  outData         1    0[BANK0 ] PTR unsigned int 
   875 ;;		 -> DeviceData(4), 
   876 ;;  data            3    1[BANK0 ] unsigned char [3]
   877 ;; Return value:  Size  Location     Type
   878 ;;                  1    wreg      unsigned char 
   879 ;; Registers used:
   880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   881 ;; Tracked objects:
   882 ;;		On entry : 60/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   886 ;;      Params:         0       0       0       0
   887 ;;      Locals:         0       4       0       0
   888 ;;      Temps:          0       0       0       0
   889 ;;      Totals:         0       4       0       0
   890 ;;Total ram usage:        4 bytes
   891 ;; Hardware stack levels used:    1
   892 ;; Hardware stack levels required when called:    3
   893 ;; This function calls:
   894 ;;		_i2cStart
   895 ;;		_i2cAddress
   896 ;;		_i2cPutByte
   897 ;;		_i2cStop
   898 ;;		_i2cGetByte
   899 ;; This function is called by:
   900 ;;		_main
   901 ;; This function uses a non-reentrant model
   902 ;;
   903  0079                     _getExternalAdc:	
   904                           
   905                           ; Regs used in _getExternalAdc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   906                           ;getExternalAdc@outData stored from wreg
   907  0079  00A0               	movwf	getExternalAdc@outData
   908                           
   909                           ;adc.c: 29: byte data[3];
   910                           ;adc.c: 30: i2cStart();
   911  007A  20F3  118A         	fcall	_i2cStart
   912                           
   913                           ;adc.c: 31: if(i2cAddress(0, 0b1101000) == 27)
   914  007C  3068               	movlw	104
   915  007D  00F4               	movwf	?_i2cAddress
   916  007E  3000               	movlw	0
   917  007F  2116  118A         	fcall	_i2cAddress
   918  0081  3A1B               	xorlw	27
   919  0082  1903               	btfsc	3,2
   920  0083  0008               	return
   921                           
   922                           ;adc.c: 33: if (i2cPutByte(0x9F) == 27)
   923  0084  309F               	movlw	159
   924  0085  2055  118A         	fcall	_i2cPutByte
   925  0087  3A1B               	xorlw	27
   926  0088  1903               	btfsc	3,2
   927  0089  0008               	return
   928                           
   929                           ;adc.c: 35: i2cStop();
   930  008A  213C  118A         	fcall	_i2cStop
   931                           
   932                           ;adc.c: 36: i2cStart();
   933  008C  20F3  118A         	fcall	_i2cStart
   934                           
   935                           ;adc.c: 37: if (i2cAddress(1, 0b1101000) == 27)
   936  008E  3068               	movlw	104
   937  008F  00F4               	movwf	?_i2cAddress
   938  0090  3001               	movlw	1
   939  0091  2116  118A         	fcall	_i2cAddress
   940  0093  3A1B               	xorlw	27
   941  0094  1903               	btfsc	3,2
   942  0095  0008               	return
   943                           
   944                           ;adc.c: 39: data[0] = i2cGetByte(0);
   945  0096  3000               	movlw	0
   946  0097  20B1  118A         	fcall	_i2cGetByte
   947  0099  1283               	bcf	3,5	;RP0=0, select bank0
   948  009A  1303               	bcf	3,6	;RP1=0, select bank0
   949  009B  00A1               	movwf	getExternalAdc@data
   950                           
   951                           ;adc.c: 44: data[1] = i2cGetByte(0);
   952  009C  3000               	movlw	0
   953  009D  20B1  118A         	fcall	_i2cGetByte
   954  009F  1283               	bcf	3,5	;RP0=0, select bank0
   955  00A0  1303               	bcf	3,6	;RP1=0, select bank0
   956  00A1  00A2               	movwf	getExternalAdc@data+1
   957                           
   958                           ;adc.c: 45: data[2] = i2cGetByte(1);
   959  00A2  3001               	movlw	1
   960  00A3  20B1  118A         	fcall	_i2cGetByte
   961  00A5  1283               	bcf	3,5	;RP0=0, select bank0
   962  00A6  1303               	bcf	3,6	;RP1=0, select bank0
   963  00A7  00A3               	movwf	getExternalAdc@data+2
   964                           
   965                           ;adc.c: 46: *outData = (data[2] << 8) | data[1];
   966  00A8  0820               	movf	getExternalAdc@outData,w
   967  00A9  0084               	movwf	4
   968  00AA  0822               	movf	getExternalAdc@data+1,w
   969  00AB  1383               	bcf	3,7	;select IRP bank0
   970  00AC  0080               	movwf	0
   971  00AD  0A84               	incf	4,f
   972  00AE  0823               	movf	getExternalAdc@data+2,w
   973  00AF  0080               	movwf	0
   974                           
   975                           ;adc.c: 47: i2cStop ();
   976  00B0  293C               	ljmp	l8192
   977  00B1                     __end_of_getExternalAdc:	
   978  00B1                     __ptext535:	
   979 ;; =============== function _adcRestart ends ============
   980                           
   981                           
   982 ;; *************** function _i2cGetByte *****************
   983 ;; Defined at:
   984 ;;		line 151 in file "i2c.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;  ack             1    wreg     unsigned char 
   987 ;; Auto vars:     Size  Location     Type
   988 ;;  ack             1    4[COMMON] unsigned char 
   989 ;;  data            1    5[COMMON] unsigned char 
   990 ;; Return value:  Size  Location     Type
   991 ;;                  1    wreg      unsigned char 
   992 ;; Registers used:
   993 ;;		wreg, status,2, status,0, pclath, cstack
   994 ;; Tracked objects:
   995 ;;		On entry : 40/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   999 ;;      Params:         0       0       0       0
  1000 ;;      Locals:         2       0       0       0
  1001 ;;      Temps:          1       0       0       0
  1002 ;;      Totals:         3       0       0       0
  1003 ;;Total ram usage:        3 bytes
  1004 ;; Hardware stack levels used:    1
  1005 ;; Hardware stack levels required when called:    2
  1006 ;; This function calls:
  1007 ;;		_breakToLoop
  1008 ;;		_CheckSspif
  1009 ;; This function is called by:
  1010 ;;		_getExternalAdc
  1011 ;; This function uses a non-reentrant model
  1012 ;;
  1013  00B1                     _i2cGetByte:	
  1014                           
  1015                           ; Regs used in _i2cGetByte: [wreg+status,2+status,0+pclath+cstack]
  1016                           ;i2cGetByte@ack stored from wreg
  1017  00B1  00F5               	movwf	i2cGetByte@ack
  1018                           
  1019                           ;i2c.c: 152: counti2cloop = 0;
  1020  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  1021  00B3  01AC               	clrf	_counti2cloop
  1022  00B4  01AD               	clrf	_counti2cloop+1
  1023                           
  1024                           ;i2c.c: 153: char data;
  1025                           ;i2c.c: 154: RCEN = 1;
  1026  00B5  1683               	bsf	3,5	;RP0=1, select bank1
  1027  00B6  1591               	bsf	17,3
  1028  00B7                     l6021:	
  1029                           ;i2c.c: 155: while( RCEN ) {
  1030                           
  1031  00B7  1683               	bsf	3,5	;RP0=1, select bank1
  1032  00B8  1D91               	btfss	17,3
  1033  00B9  28C7               	goto	l8224
  1034                           
  1035                           ;i2c.c: 156: counti2cloop++;
  1036  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1037  00BB  0AAC               	incf	_counti2cloop,f
  1038  00BC  1903               	skipnz
  1039  00BD  0AAD               	incf	_counti2cloop+1,f
  1040                           
  1041                           ;i2c.c: 157: if ( breakToLoop () == 27 ){
  1042  00BE  20EB  118A         	fcall	_breakToLoop
  1043  00C0  3A1B               	xorlw	27
  1044  00C1  1D03               	skipz
  1045  00C2  28B7               	goto	l6021
  1046  00C3                     l8218:	
  1047  00C3  301B               	movlw	27
  1048                           
  1049                           ;i2c.c: 158: counti2cloop = 0;
  1050  00C4  01AC               	clrf	_counti2cloop
  1051  00C5  01AD               	clrf	_counti2cloop+1
  1052                           
  1053                           ;i2c.c: 159: return 27;
  1054  00C6  0008               	return
  1055  00C7                     l8224:	
  1056                           
  1057                           ;i2c.c: 160: }
  1058                           ;i2c.c: 161: }
  1059                           ;i2c.c: 162: data = SSPBUF;
  1060  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1061  00C8  0813               	movf	19,w	;volatile
  1062  00C9  00F6               	movwf	i2cGetByte@data
  1063  00CA                     l6026:	
  1064                           ;i2c.c: 163: while(BF) {
  1065                           
  1066  00CA  1683               	bsf	3,5	;RP0=1, select bank1
  1067  00CB  1C14               	btfss	20,0
  1068  00CC  28D7               	goto	l8236
  1069                           
  1070                           ;i2c.c: 164: counti2cloop++;
  1071  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1072  00CE  0AAC               	incf	_counti2cloop,f
  1073  00CF  1903               	skipnz
  1074  00D0  0AAD               	incf	_counti2cloop+1,f
  1075                           
  1076                           ;i2c.c: 165: if ( breakToLoop () == 27 ) {
  1077  00D1  20EB  118A         	fcall	_breakToLoop
  1078  00D3  3A1B               	xorlw	27
  1079  00D4  1903               	btfsc	3,2
  1080  00D5  28C3               	goto	l8218
  1081  00D6  28CA               	goto	l6026
  1082  00D7                     l8236:	
  1083                           
  1084                           ;i2c.c: 168: }
  1085                           ;i2c.c: 169: }
  1086                           ;i2c.c: 170: CheckSspif();
  1087  00D7  2112  118A         	fcall	_CheckSspif
  1088                           
  1089                           ;i2c.c: 171: if(!ack) {
  1090  00D9  08F5               	movf	i2cGetByte@ack,f
  1091  00DA  1D03               	skipz
  1092  00DB  28DF               	goto	l6030
  1093                           
  1094                           ;i2c.c: 172: ACKDT = 0;
  1095  00DC  1683               	bsf	3,5	;RP0=1, select bank1
  1096  00DD  1291               	bcf	17,5
  1097  00DE  28E1               	goto	L1
  1098  00DF                     l6030:	
  1099                           ;i2c.c: 174: }else{
  1100                           
  1101                           ;i2c.c: 173: ACKEN = 1;
  1102                           
  1103                           
  1104                           ;i2c.c: 175: ACKDT = 1;
  1105  00DF  1683               	bsf	3,5	;RP0=1, select bank1
  1106  00E0  1691               	bsf	17,5
  1107  00E1                     L1:	
  1108  00E1  30F9               	movlw	249
  1109                           
  1110                           ;i2c.c: 176: ACKEN = 1;
  1111  00E2  1611               	bsf	17,4
  1112                           
  1113                           ;i2c.c: 177: }
  1114                           ;i2c.c: 178: _delay((unsigned long)((1)*(4000000/4000.0)));
  1115  00E3  00F4               	movwf	??_i2cGetByte
  1116  00E4                     u1227:	
  1117  00E4  0064               	clrwdt
  1118  00E5  0BF4               	decfsz	??_i2cGetByte,f
  1119  00E6  28E4               	goto	u1227
  1120  00E7  28E8               	nop2	;nop
  1121  00E8  0064               	clrwdt
  1122                           
  1123                           ;i2c.c: 179: return data;
  1124  00E9  0876               	movf	i2cGetByte@data,w
  1125  00EA  0008               	return
  1126  00EB                     __end_of_i2cGetByte:	
  1127  00EB                     __ptext542:	
  1128 ;; =============== function _CheckSspif ends ============
  1129                           
  1130                           
  1131 ;; *************** function _breakToLoop *****************
  1132 ;; Defined at:
  1133 ;;		line 9 in file "i2c.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;		None
  1136 ;; Auto vars:     Size  Location     Type
  1137 ;;		None
  1138 ;; Return value:  Size  Location     Type
  1139 ;;                  1    wreg      unsigned char 
  1140 ;; Registers used:
  1141 ;;		wreg
  1142 ;; Tracked objects:
  1143 ;;		On entry : 60/0
  1144 ;;		On exit  : 60/0
  1145 ;;		Unchanged: FFF9F/0
  1146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1147 ;;      Params:         0       0       0       0
  1148 ;;      Locals:         0       0       0       0
  1149 ;;      Temps:          0       0       0       0
  1150 ;;      Totals:         0       0       0       0
  1151 ;;Total ram usage:        0 bytes
  1152 ;; Hardware stack levels used:    1
  1153 ;; Hardware stack levels required when called:    1
  1154 ;; This function calls:
  1155 ;;		Nothing
  1156 ;; This function is called by:
  1157 ;;		_i2cStart
  1158 ;;		_i2cStop
  1159 ;;		_i2cAddress
  1160 ;;		_i2cPutByte
  1161 ;;		_i2cGetByte
  1162 ;; This function uses a non-reentrant model
  1163 ;;
  1164  00EB                     _breakToLoop:	
  1165                           
  1166                           ;i2c.c: 10: if (counti2cloop == 60000)
  1167                           
  1168                           ; Regs used in _breakToLoop: [wreg]
  1169  00EB  082D               	movf	_counti2cloop+1,w
  1170  00EC  3AEA               	xorlw	234
  1171  00ED  3060               	movlw	96
  1172  00EE  1903               	skipnz
  1173  00EF  062C               	xorwf	_counti2cloop,w
  1174  00F0  1903               	btfsc	3,2
  1175                           
  1176                           ;i2c.c: 11: return 27;
  1177  00F1  341B               	retlw	27
  1178                           
  1179                           ;i2c.c: 12: return 1;
  1180  00F2  3401               	retlw	1
  1181  00F3                     __end_of_breakToLoop:	
  1182  00F3                     __ptext539:	
  1183 ;; =============== function _i2cAddress ends ============
  1184                           
  1185                           
  1186 ;; *************** function _i2cStart *****************
  1187 ;; Defined at:
  1188 ;;		line 17 in file "i2c.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;		None
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;		None
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  1    wreg      unsigned char 
  1195 ;; Registers used:
  1196 ;;		wreg, status,2, status,0, pclath, cstack
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1202 ;;      Params:         0       0       0       0
  1203 ;;      Locals:         0       0       0       0
  1204 ;;      Temps:          1       0       0       0
  1205 ;;      Totals:         1       0       0       0
  1206 ;;Total ram usage:        1 bytes
  1207 ;; Hardware stack levels used:    1
  1208 ;; Hardware stack levels required when called:    2
  1209 ;; This function calls:
  1210 ;;		_breakToLoop
  1211 ;;		_CheckSspif
  1212 ;; This function is called by:
  1213 ;;		_getExternalAdc
  1214 ;;		_adcRestart
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217  00F3                     _i2cStart:	
  1218                           
  1219                           ;i2c.c: 18: counti2cloop = 0;
  1220                           
  1221                           ; Regs used in _i2cStart: [wreg+status,2+status,0+pclath+cstack]
  1222  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1223  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1224  00F5  01AC               	clrf	_counti2cloop
  1225  00F6  01AD               	clrf	_counti2cloop+1
  1226                           
  1227                           ;i2c.c: 19: SEN = 1;
  1228  00F7  1683               	bsf	3,5	;RP0=1, select bank1
  1229  00F8  1411               	bsf	17,0
  1230  00F9                     l5988:	
  1231                           ;i2c.c: 20: while(SEN){
  1232                           
  1233  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  1234  00FA  1C11               	btfss	17,0
  1235  00FB  2908               	goto	l8130
  1236                           
  1237                           ;i2c.c: 21: counti2cloop++;
  1238  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1239  00FD  0AAC               	incf	_counti2cloop,f
  1240  00FE  1903               	skipnz
  1241  00FF  0AAD               	incf	_counti2cloop+1,f
  1242                           
  1243                           ;i2c.c: 22: if(breakToLoop() == 27) {
  1244  0100  20EB  118A         	fcall	_breakToLoop
  1245  0102  3A1B               	xorlw	27
  1246  0103  1D03               	skipz
  1247  0104  28F9               	goto	l5988
  1248                           
  1249                           ;i2c.c: 23: counti2cloop = 0;
  1250  0105  01AC               	clrf	_counti2cloop
  1251  0106  01AD               	clrf	_counti2cloop+1
  1252  0107  0008               	return
  1253  0108                     l8130:	
  1254                           
  1255                           ;i2c.c: 25: }
  1256                           ;i2c.c: 26: }
  1257                           ;i2c.c: 27: CheckSspif();
  1258  0108  2112  118A         	fcall	_CheckSspif
  1259                           
  1260                           ;i2c.c: 28: _delay((unsigned long)((1)*(4000000/4000.0)));
  1261  010A  30F9               	movlw	249
  1262  010B  00F4               	movwf	??_i2cStart
  1263  010C                     u1257:	
  1264  010C  0064               	clrwdt
  1265  010D  0BF4               	decfsz	??_i2cStart,f
  1266  010E  290C               	goto	u1257
  1267  010F  2910               	nop2	;nop
  1268  0110  0064               	clrwdt
  1269  0111  0008               	return
  1270  0112                     __end_of_i2cStart:	
  1271  0112                     __ptext541:	
  1272 ;; =============== function _pushByte ends ============
  1273                           
  1274                           
  1275 ;; *************** function _CheckSspif *****************
  1276 ;; Defined at:
  1277 ;;		line 70 in file "i2c.c"
  1278 ;; Parameters:    Size  Location     Type
  1279 ;;		None
  1280 ;; Auto vars:     Size  Location     Type
  1281 ;;		None
  1282 ;; Return value:  Size  Location     Type
  1283 ;;		None               void
  1284 ;; Registers used:
  1285 ;;		None
  1286 ;; Tracked objects:
  1287 ;;		On entry : 60/20
  1288 ;;		On exit  : 60/0
  1289 ;;		Unchanged: FFF9F/0
  1290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1291 ;;      Params:         0       0       0       0
  1292 ;;      Locals:         0       0       0       0
  1293 ;;      Temps:          0       0       0       0
  1294 ;;      Totals:         0       0       0       0
  1295 ;;Total ram usage:        0 bytes
  1296 ;; Hardware stack levels used:    1
  1297 ;; Hardware stack levels required when called:    1
  1298 ;; This function calls:
  1299 ;;		Nothing
  1300 ;; This function is called by:
  1301 ;;		_i2cStart
  1302 ;;		_i2cStop
  1303 ;;		_i2cAddress
  1304 ;;		_i2cPutByte
  1305 ;;		_i2cGetByte
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308  0112                     _CheckSspif:	
  1309                           
  1310                           ;i2c.c: 71: SSPOV = SSPIF = 0;
  1311                           
  1312                           ; Regs used in _CheckSspif: []
  1313  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1314  0113  118C               	bcf	12,3
  1315  0114  1314               	bcf	20,6
  1316  0115  0008               	return
  1317  0116                     __end_of_CheckSspif:	
  1318  0116                     __ptext538:	
  1319 ;; =============== function _i2cPutByte ends ============
  1320                           
  1321                           
  1322 ;; *************** function _i2cAddress *****************
  1323 ;; Defined at:
  1324 ;;		line 99 in file "i2c.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;  w_r             1    wreg     unsigned char 
  1327 ;;  address         1    3[COMMON] unsigned char 
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;  w_r             1    5[COMMON] unsigned char 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  1    wreg      unsigned char 
  1332 ;; Registers used:
  1333 ;;		wreg, status,2, status,0, pclath, cstack
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 40/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1339 ;;      Params:         1       0       0       0
  1340 ;;      Locals:         1       0       0       0
  1341 ;;      Temps:          1       0       0       0
  1342 ;;      Totals:         3       0       0       0
  1343 ;;Total ram usage:        3 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; Hardware stack levels required when called:    2
  1346 ;; This function calls:
  1347 ;;		_breakToLoop
  1348 ;;		_CheckSspif
  1349 ;; This function is called by:
  1350 ;;		_getExternalAdc
  1351 ;;		_adcRestart
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354  0116                     _i2cAddress:	
  1355                           
  1356                           ; Regs used in _i2cAddress: [wreg+status,2+status,0+pclath+cstack]
  1357                           ;i2cAddress@w_r stored from wreg
  1358  0116  00F6               	movwf	i2cAddress@w_r
  1359                           
  1360                           ;i2c.c: 100: counti2cloop = 0;
  1361  0117  1283               	bcf	3,5	;RP0=0, select bank0
  1362  0118  1303               	bcf	3,6	;RP1=0, select bank0
  1363  0119  01AC               	clrf	_counti2cloop
  1364  011A  01AD               	clrf	_counti2cloop+1
  1365                           
  1366                           ;i2c.c: 106: SSPBUF = (address << 1) | w_r;
  1367  011B  1003               	clrc
  1368  011C  0D74               	rlf	i2cAddress@address,w
  1369  011D  0476               	iorwf	i2cAddress@w_r,w
  1370  011E  0093               	movwf	19	;volatile
  1371  011F                     l6005:	
  1372                           ;i2c.c: 107: while(BF){
  1373                           
  1374  011F  1683               	bsf	3,5	;RP0=1, select bank1
  1375  0120  1C14               	btfss	20,0
  1376  0121  292E               	goto	l8150
  1377                           
  1378                           ;i2c.c: 108: counti2cloop++;
  1379  0122  1283               	bcf	3,5	;RP0=0, select bank0
  1380  0123  0AAC               	incf	_counti2cloop,f
  1381  0124  1903               	skipnz
  1382  0125  0AAD               	incf	_counti2cloop+1,f
  1383                           
  1384                           ;i2c.c: 109: if (breakToLoop() == 27){
  1385  0126  20EB  118A         	fcall	_breakToLoop
  1386  0128  3A1B               	xorlw	27
  1387  0129  1D03               	skipz
  1388  012A  291F               	goto	l6005
  1389                           
  1390                           ;i2c.c: 110: counti2cloop = 0;
  1391  012B  01AC               	clrf	_counti2cloop
  1392  012C  01AD               	clrf	_counti2cloop+1
  1393                           
  1394                           ;i2c.c: 111: return 27;
  1395  012D  341B               	retlw	27
  1396  012E                     l8150:	
  1397                           
  1398                           ;i2c.c: 112: }
  1399                           ;i2c.c: 113: }
  1400                           ;i2c.c: 114: CheckSspif();
  1401  012E  2112  118A         	fcall	_CheckSspif
  1402                           
  1403                           ;i2c.c: 115: _delay((unsigned long)((1)*(4000000/4000.0)));
  1404  0130  30F9               	movlw	249
  1405  0131  00F5               	movwf	??_i2cAddress
  1406  0132                     u1247:	
  1407  0132  0064               	clrwdt
  1408  0133  0BF5               	decfsz	??_i2cAddress,f
  1409  0134  2932               	goto	u1247
  1410  0135  2936               	nop2	;nop
  1411  0136  0064               	clrwdt
  1412                           
  1413                           ;i2c.c: 116: if (ACKSTAT == 0){
  1414  0137  1683               	bsf	3,5	;RP0=1, select bank1
  1415  0138  1303               	bcf	3,6	;RP1=0, select bank1
  1416  0139  1F11               	btfss	17,6
  1417                           
  1418                           ;i2c.c: 117: return 1;
  1419  013A  3401               	retlw	1
  1420  013B  341B               	retlw	27
  1421  013C                     __end_of_i2cAddress:	
  1422  013C                     __ptext536:	
  1423 ;; =============== function _i2cGetByte ends ============
  1424                           
  1425                           
  1426 ;; *************** function _i2cStop *****************
  1427 ;; Defined at:
  1428 ;;		line 51 in file "i2c.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;		None
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;		None
  1433 ;; Return value:  Size  Location     Type
  1434 ;;                  1    wreg      unsigned char 
  1435 ;; Registers used:
  1436 ;;		wreg, status,2, status,0, pclath, cstack
  1437 ;; Tracked objects:
  1438 ;;		On entry : 40/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1442 ;;      Params:         0       0       0       0
  1443 ;;      Locals:         0       0       0       0
  1444 ;;      Temps:          0       0       0       0
  1445 ;;      Totals:         0       0       0       0
  1446 ;;Total ram usage:        0 bytes
  1447 ;; Hardware stack levels used:    1
  1448 ;; Hardware stack levels required when called:    2
  1449 ;; This function calls:
  1450 ;;		_breakToLoop
  1451 ;;		_CheckSspif
  1452 ;; This function is called by:
  1453 ;;		_getExternalAdc
  1454 ;;		_adcRestart
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457  013C                     _i2cStop:	
  1458  013C                     l8192:	
  1459                           ; Regs used in _i2cStop: [wreg+status,2+status,0+pclath+cstack]
  1460                           
  1461                           
  1462                           ;i2c.c: 52: counti2cloop = 0;
  1463  013C  1283               	bcf	3,5	;RP0=0, select bank0
  1464  013D  01AC               	clrf	_counti2cloop
  1465  013E  01AD               	clrf	_counti2cloop+1
  1466                           
  1467                           ;i2c.c: 53: PEN = 1;
  1468  013F  1683               	bsf	3,5	;RP0=1, select bank1
  1469  0140  1511               	bsf	17,2
  1470  0141                     l5995:	
  1471                           ;i2c.c: 54: while( PEN ) {
  1472                           
  1473  0141  1683               	bsf	3,5	;RP0=1, select bank1
  1474  0142  1D11               	btfss	17,2
  1475  0143  2950               	goto	l8204
  1476                           
  1477                           ;i2c.c: 55: counti2cloop++;
  1478  0144  1283               	bcf	3,5	;RP0=0, select bank0
  1479  0145  0AAC               	incf	_counti2cloop,f
  1480  0146  1903               	skipnz
  1481  0147  0AAD               	incf	_counti2cloop+1,f
  1482                           
  1483                           ;i2c.c: 56: if ( breakToLoop () == 27 ) {
  1484  0148  20EB  118A         	fcall	_breakToLoop
  1485  014A  3A1B               	xorlw	27
  1486  014B  1D03               	skipz
  1487  014C  2941               	goto	l5995
  1488                           
  1489                           ;i2c.c: 57: counti2cloop = 0;
  1490  014D  01AC               	clrf	_counti2cloop
  1491  014E  01AD               	clrf	_counti2cloop+1
  1492  014F  0008               	return
  1493  0150                     l8204:	
  1494                           
  1495                           ;i2c.c: 59: }
  1496                           ;i2c.c: 60: }
  1497                           ;i2c.c: 61: CheckSspif();
  1498  0150  2112               	fcall	_CheckSspif
  1499                           
  1500                           ;i2c.c: 62: _delay((unsigned long)((1)*(4000000/4000000.0)));
  1501  0151  0064               	clrwdt
  1502  0152  0008               	return
  1503  0153                     __end_of_i2cStop:	
  1504                           
  1505                           	psect	text540
  1506  0269                     __ptext540:	
  1507 ;; =============== function _i2cStart ends ============
  1508                           
  1509                           
  1510 ;; *************** function _pushByte *****************
  1511 ;; Defined at:
  1512 ;;		line 5 in file "uart.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;  b               1    wreg     unsigned char 
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;  b               1    4[COMMON] unsigned char 
  1517 ;;  i               2    5[COMMON] int 
  1518 ;; Return value:  Size  Location     Type
  1519 ;;		None               void
  1520 ;; Registers used:
  1521 ;;		wreg, status,2, status,0, btemp+1
  1522 ;; Tracked objects:
  1523 ;;		On entry : 60/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1527 ;;      Params:         0       0       0       0
  1528 ;;      Locals:         3       0       0       0
  1529 ;;      Temps:          1       0       0       0
  1530 ;;      Totals:         4       0       0       0
  1531 ;;Total ram usage:        4 bytes
  1532 ;; Hardware stack levels used:    1
  1533 ;; Hardware stack levels required when called:    1
  1534 ;; This function calls:
  1535 ;;		Nothing
  1536 ;; This function is called by:
  1537 ;;		_main
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540  0269                     _pushByte:	
  1541                           
  1542                           ; Regs used in _pushByte: [wreg+status,2+status,0+btemp+1]
  1543                           ;pushByte@b stored from wreg
  1544  0269  00F5               	movwf	pushByte@b
  1545                           
  1546                           ;uart.c: 6: GIE = 0;
  1547  026A  138B               	bcf	11,7
  1548                           
  1549                           ;uart.c: 8: PORTBbits.RB7 = 0;
  1550  026B  1386               	bcf	6,7	;volatile
  1551                           
  1552                           ;uart.c: 9: _delay((unsigned long)((79)*(4000000/4000000.0)));
  1553  026C  301A               	movlw	26
  1554  026D  00F4               	movwf	??_pushByte
  1555  026E                     u1267:	
  1556  026E  0BF4               	decfsz	??_pushByte,f
  1557  026F  2A6E               	goto	u1267
  1558                           
  1559                           ;uart.c: 12: for(int i = 0; i < 8; i++){
  1560  0270  01F6               	clrf	pushByte@i
  1561  0271  01F7               	clrf	pushByte@i+1
  1562  0272                     l3983:	
  1563                           
  1564                           ;uart.c: 13: if(b & 0x01)
  1565  0272  1C75               	btfss	pushByte@b,0
  1566  0273  2A78               	goto	l3985
  1567                           
  1568                           ;uart.c: 14: PORTBbits.RB7 = 1;
  1569  0274  1283               	bcf	3,5	;RP0=0, select bank0
  1570  0275  1303               	bcf	3,6	;RP1=0, select bank0
  1571  0276  1786               	bsf	6,7	;volatile
  1572  0277  2A7B               	goto	l7846
  1573  0278                     l3985:	
  1574                           
  1575                           ;uart.c: 15: else
  1576                           ;uart.c: 16: PORTBbits.RB7 = 0;
  1577  0278  1283               	bcf	3,5	;RP0=0, select bank0
  1578  0279  1303               	bcf	3,6	;RP1=0, select bank0
  1579  027A  1386               	bcf	6,7	;volatile
  1580  027B                     l7846:	
  1581                           
  1582                           ;uart.c: 17: _delay((unsigned long)((79)*(4000000/4000000.0)));
  1583  027B  301A               	movlw	26
  1584  027C  00F4               	movwf	??_pushByte
  1585  027D                     u1277:	
  1586  027D  0BF4               	decfsz	??_pushByte,f
  1587  027E  2A7D               	goto	u1277
  1588                           
  1589                           ;uart.c: 18: b >>= 1;
  1590  027F  1003               	clrc
  1591  0280  0CF5               	rrf	pushByte@b,f
  1592  0281  0AF6               	incf	pushByte@i,f
  1593  0282  1903               	skipnz
  1594  0283  0AF7               	incf	pushByte@i+1,f
  1595  0284  0877               	movf	pushByte@i+1,w
  1596  0285  3A80               	xorlw	128
  1597  0286  00FF               	movwf	127
  1598  0287  3080               	movlw	128
  1599  0288  027F               	subwf	127,w
  1600  0289  1D03               	skipz
  1601  028A  2A8D               	goto	u775
  1602  028B  3008               	movlw	8
  1603  028C  0276               	subwf	pushByte@i,w
  1604  028D                     u775:	
  1605  028D  1C03               	skipc
  1606  028E  2A72               	goto	l3983
  1607                           
  1608                           ;uart.c: 19: }
  1609                           ;uart.c: 22: PORTBbits.RB7 = 1;
  1610  028F  1283               	bcf	3,5	;RP0=0, select bank0
  1611  0290  1303               	bcf	3,6	;RP1=0, select bank0
  1612  0291  1786               	bsf	6,7	;volatile
  1613                           
  1614                           ;uart.c: 23: _delay((unsigned long)((79)*(4000000/4000000.0)));
  1615  0292  301A               	movlw	26
  1616  0293  00F4               	movwf	??_pushByte
  1617  0294                     u1287:	
  1618  0294  0BF4               	decfsz	??_pushByte,f
  1619  0295  2A94               	goto	u1287
  1620                           
  1621                           ;uart.c: 26: GIE = 1;
  1622  0296  178B               	bsf	11,7
  1623  0297  0008               	return
  1624  0298                     __end_of_pushByte:	
  1625                           
  1626                           	psect	text543
  1627  02B8                     __ptext543:	
  1628 ;; =============== function _breakToLoop ends ============
  1629                           
  1630                           
  1631 ;; *************** function _getAdc *****************
  1632 ;; Defined at:
  1633 ;;		line 7 in file "adc.c"
  1634 ;; Parameters:    Size  Location     Type
  1635 ;;		None
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;		None
  1638 ;; Return value:  Size  Location     Type
  1639 ;;                  2    3[COMMON] unsigned int 
  1640 ;; Registers used:
  1641 ;;		wreg
  1642 ;; Tracked objects:
  1643 ;;		On entry : 0/0
  1644 ;;		On exit  : 60/20
  1645 ;;		Unchanged: FFF9F/0
  1646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1647 ;;      Params:         2       0       0       0
  1648 ;;      Locals:         0       0       0       0
  1649 ;;      Temps:          0       0       0       0
  1650 ;;      Totals:         2       0       0       0
  1651 ;;Total ram usage:        2 bytes
  1652 ;; Hardware stack levels used:    1
  1653 ;; Hardware stack levels required when called:    1
  1654 ;; This function calls:
  1655 ;;		Nothing
  1656 ;; This function is called by:
  1657 ;;		_main
  1658 ;; This function uses a non-reentrant model
  1659 ;;
  1660  02B8                     _getAdc:	
  1661                           
  1662                           ;adc.c: 8: GO = 1;
  1663                           
  1664                           ; Regs used in _getAdc: [wreg]
  1665  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  1666  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  1667  02BA  149F               	bsf	31,1
  1668  02BB                     l4982:	
  1669                           ;adc.c: 9: while( GO );
  1670                           
  1671  02BB  189F               	btfsc	31,1
  1672  02BC  2ABB               	goto	l4982
  1673                           
  1674                           ;adc.c: 10: return (ADRESH<<8 | ADRESL);
  1675  02BD  081E               	movf	30,w	;volatile
  1676  02BE  00F5               	movwf	?_getAdc+1
  1677  02BF  01F4               	clrf	?_getAdc
  1678  02C0  1683               	bsf	3,5	;RP0=1, select bank1
  1679  02C1  081E               	movf	30,w	;volatile
  1680  02C2  04F4               	iorwf	?_getAdc,f
  1681  02C3  0008               	return
  1682  02C4                     __end_of_getAdc:	
  1683                           
  1684                           	psect	text544
  1685  0153                     __ptext544:	
  1686 ;; =============== function _getAdc ends ============
  1687                           
  1688                           
  1689 ;; *************** function _clock *****************
  1690 ;; Defined at:
  1691 ;;		line 10 in file "ivector.c"
  1692 ;; Parameters:    Size  Location     Type
  1693 ;;		None
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;		None
  1696 ;; Return value:  Size  Location     Type
  1697 ;;		None               void
  1698 ;; Registers used:
  1699 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1700 ;; Tracked objects:
  1701 ;;		On entry : 0/0
  1702 ;;		On exit  : 60/0
  1703 ;;		Unchanged: FFF9F/0
  1704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1705 ;;      Params:         0       0       0       0
  1706 ;;      Locals:         0       0       0       0
  1707 ;;      Temps:          3       0       0       0
  1708 ;;      Totals:         3       0       0       0
  1709 ;;Total ram usage:        3 bytes
  1710 ;; Hardware stack levels used:    1
  1711 ;; This function calls:
  1712 ;;		Nothing
  1713 ;; This function is called by:
  1714 ;;		Interrupt level 1
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717  0153                     _clock:	
  1718                           
  1719                           ;ivector.c: 11: if (SSPIF)
  1720  0153  1283               	bcf	3,5	;RP0=0, select bank0
  1721  0154  1303               	bcf	3,6	;RP1=0, select bank0
  1722  0155  1D8C               	btfss	12,3
  1723  0156  2959               	goto	i1l1974
  1724                           
  1725                           ;ivector.c: 12: SSPOV = SSPIF = 0;
  1726  0157  118C               	bcf	12,3
  1727  0158  1314               	bcf	20,6
  1728  0159                     i1l1974:	
  1729                           
  1730                           ;ivector.c: 17: if(T0IF){
  1731  0159  1D0B               	btfss	11,2
  1732  015A  2A0C               	goto	i1l7812
  1733                           
  1734                           ;ivector.c: 21: uSecond++;
  1735  015B  0AF8               	incf	_uSecond,f
  1736  015C  1903               	skipnz
  1737  015D  0AF9               	incf	_uSecond+1,f
  1738                           
  1739                           ;ivector.c: 22: if(uSecond == 100) {
  1740  015E  0878               	movf	_uSecond,w
  1741  015F  3A64               	xorlw	100
  1742  0160  0479               	iorwf	_uSecond+1,w
  1743  0161  1D03               	skipz
  1744  0162  2A00               	goto	i1l7810
  1745                           
  1746                           ;ivector.c: 23: uSecond = 0;
  1747  0163  01F8               	clrf	_uSecond
  1748  0164  01F9               	clrf	_uSecond+1
  1749                           
  1750                           ;ivector.c: 24: second++;
  1751  0165  0AB0               	incf	_second,f
  1752  0166  1903               	skipnz
  1753  0167  0AB1               	incf	_second+1,f
  1754                           
  1755                           ;ivector.c: 25: if(second == 60) {
  1756  0168  0830               	movf	_second,w
  1757  0169  3A3C               	xorlw	60
  1758  016A  0431               	iorwf	_second+1,w
  1759  016B  1D03               	skipz
  1760  016C  2A00               	goto	i1l7810
  1761                           
  1762                           ;ivector.c: 26: second = 0;
  1763  016D  01B0               	clrf	_second
  1764  016E  01B1               	clrf	_second+1
  1765                           
  1766                           ;ivector.c: 27: minute++;
  1767  016F  0AAE               	incf	_minute,f
  1768  0170  1903               	skipnz
  1769  0171  0AAF               	incf	_minute+1,f
  1770                           
  1771                           ;ivector.c: 28: if (minute == 60) {
  1772  0172  082E               	movf	_minute,w
  1773  0173  3A3C               	xorlw	60
  1774  0174  042F               	iorwf	_minute+1,w
  1775  0175  1D03               	skipz
  1776  0176  2A00               	goto	i1l7810
  1777                           
  1778                           ;ivector.c: 29: minute = 0;
  1779  0177  01AE               	clrf	_minute
  1780  0178  01AF               	clrf	_minute+1
  1781  0179  2A00               	goto	i1l7810
  1782  017A                     i1l1980:	
  1783                           ;ivector.c: 43: case 0:
  1784                           
  1785                           ;ivector.c: 30: }
  1786                           ;ivector.c: 31: }
  1787                           ;ivector.c: 32: }
  1788                           ;ivector.c: 38: switch (status) {
  1789                           
  1790                           
  1791                           ;ivector.c: 44: RB3 = 0, RB2 = 0;
  1792                           
  1793                           ;ivector.c: 45: (uSecond < 5 || ( uSecond > 10 && uSecond < 15 ) || ( uSecond > 20 && uS
      +                          econd < 25)) ? RB0 = 0, RB1 = 1: RB0 = 0, RB1 = 0;
  1794  017A  2219  118A         	fcall	PL2	;call to abstracted procedure
  1795  017C  1903               	skipnz
  1796  017D  0278               	subwf	_uSecond,w
  1797  017E  1C03               	skipc
  1798  017F  2999               	goto	i1l1986
  1799  0180  3000               	movlw	0
  1800  0181  221E  118A         	fcall	PL3	;call to abstracted procedure
  1801  0183  1C03               	skipc
  1802  0184  298C               	goto	L9
  1803  0185  0279               	subwf	_uSecond+1,w
  1804  0186  300F               	movlw	15
  1805  0187  1903               	skipnz
  1806  0188  0278               	subwf	_uSecond,w
  1807  0189  1C03               	skipc
  1808  018A  2999               	goto	i1l1986
  1809  018B  3000               	movlw	0
  1810  018C                     L9:	
  1811  018C  0279               	subwf	_uSecond+1,w
  1812  018D  3015               	movlw	21
  1813  018E  1903               	skipnz
  1814  018F  0278               	subwf	_uSecond,w
  1815  0190  1C03               	skipc
  1816  0191  299B               	goto	i1l1982
  1817  0192  3000               	movlw	0
  1818  0193  0279               	subwf	_uSecond+1,w
  1819  0194  3019               	movlw	25
  1820  0195                     L7:	
  1821  0195  1903               	skipnz
  1822  0196  0278               	subwf	_uSecond,w
  1823  0197  1803               	skipnc
  1824  0198  299B               	goto	i1l1982
  1825  0199                     i1l1986:	
  1826  0199  1006               	bcf	6,0
  1827  019A  29F4               	goto	L2
  1828  019B                     i1l1982:	
  1829  019B  1006               	bcf	6,0
  1830  019C  29BD               	goto	L3
  1831  019D                     i1l1990:	
  1832                           ;ivector.c: 51: case 7:
  1833                           
  1834                           
  1835                           ;ivector.c: 52: RB3 = 0, RB2 = 0;
  1836                           
  1837                           ;ivector.c: 53: (uSecond < 5 || ( uSecond > 10 && uSecond < 15 ) || (uSecond > 20 && uSe
      +                          cond < 25)) ? RB0 = 1, RB1 = 0: RB0 = 0, RB1 = 0;
  1838  019D  2219  118A         	fcall	PL2	;call to abstracted procedure
  1839  019F  1903               	skipnz
  1840  01A0  0278               	subwf	_uSecond,w
  1841  01A1  1C03               	skipc
  1842  01A2  29BC               	goto	i1l1996
  1843  01A3  3000               	movlw	0
  1844  01A4  221E  118A         	fcall	PL3	;call to abstracted procedure
  1845  01A6  1C03               	skipc
  1846  01A7  29AF               	goto	L10
  1847  01A8  0279               	subwf	_uSecond+1,w
  1848  01A9  300F               	movlw	15
  1849  01AA  1903               	skipnz
  1850  01AB  0278               	subwf	_uSecond,w
  1851  01AC  1C03               	skipc
  1852  01AD  29BC               	goto	i1l1996
  1853  01AE  3000               	movlw	0
  1854  01AF                     L10:	
  1855  01AF  0279               	subwf	_uSecond+1,w
  1856  01B0  3015               	movlw	21
  1857  01B1  1903               	skipnz
  1858  01B2  0278               	subwf	_uSecond,w
  1859  01B3  1C03               	skipc
  1860  01B4  299B               	goto	i1l1982
  1861  01B5  3000               	movlw	0
  1862  01B6  0279               	subwf	_uSecond+1,w
  1863  01B7  3019               	movlw	25
  1864  01B8                     L6:	
  1865  01B8  1903               	skipnz
  1866  01B9  0278               	subwf	_uSecond,w
  1867  01BA  1803               	skipnc
  1868  01BB  299B               	goto	i1l1982
  1869  01BC                     i1l1996:	
  1870  01BC  1406               	bsf	6,0
  1871  01BD                     L3:	
  1872  01BD  1086               	bcf	6,1
  1873  01BE  2A0C               	goto	i1l7812
  1874  01BF                     i1l1999:	
  1875                           ;ivector.c: 58: case 1:
  1876                           
  1877  01BF  3000               	movlw	0
  1878                           
  1879                           ;ivector.c: 59: RB2 = 1, RB3 = 0;
  1880  01C0  1506               	bsf	6,2
  1881  01C1  1186               	bcf	6,3
  1882                           
  1883                           ;ivector.c: 60: uSecond < 5 ? RB0 = 1, RB1 = 0: RB0 = 0, RB1 = 0;
  1884  01C2  0279               	subwf	_uSecond+1,w
  1885  01C3  3005               	movlw	5
  1886  01C4  29B8               	goto	L6
  1887  01C5                     i1l2004:	
  1888                           ;ivector.c: 65: case 3:
  1889                           
  1890                           
  1891                           ;ivector.c: 66: RB2 = 1, RB3 = 0;
  1892  01C5  1506               	bsf	6,2
  1893  01C6  1186               	bcf	6,3
  1894  01C7  29CA               	goto	L8
  1895  01C8                     i1l2009:	
  1896                           ;ivector.c: 72: case 2:
  1897                           
  1898                           ;ivector.c: 67: uSecond < 5 ? RB0 = 0, RB1 = 1: RB0 = 0, RB1 = 0;
  1899                           
  1900                           
  1901                           ;ivector.c: 73: RB3 = 1, RB2 = 0;
  1902  01C8  1586               	bsf	6,3
  1903  01C9  1106               	bcf	6,2
  1904  01CA                     L8:	
  1905                           
  1906                           ;ivector.c: 74: uSecond < 5 ? RB0 = 0, RB1 = 1: RB0 = 0, RB1 = 0;
  1907  01CA  3000               	movlw	0
  1908  01CB  0279               	subwf	_uSecond+1,w
  1909  01CC  3005               	movlw	5
  1910  01CD  2995               	goto	L7
  1911  01CE                     i1l2014:	
  1912                           ;ivector.c: 79: case 4:
  1913                           
  1914  01CE  3000               	movlw	0
  1915                           
  1916                           ;ivector.c: 80: RB3 = 1, RB2 = 0;
  1917  01CF  1586               	bsf	6,3
  1918  01D0  1106               	bcf	6,2
  1919                           
  1920                           ;ivector.c: 81: if(uSecond < 5){
  1921  01D1  0279               	subwf	_uSecond+1,w
  1922  01D2  3005               	movlw	5
  1923  01D3  1903               	skipnz
  1924  01D4  0278               	subwf	_uSecond,w
  1925  01D5  1C03               	btfss	3,0
  1926  01D6  2999               	goto	i1l1986
  1927  01D7  3000               	movlw	0
  1928  01D8  0279               	subwf	_uSecond+1,w
  1929  01D9  3006               	movlw	6
  1930  01DA  1903               	skipnz
  1931  01DB  0278               	subwf	_uSecond,w
  1932  01DC  3000               	movlw	0
  1933  01DD  1C03               	skipc
  1934  01DE  29E6               	goto	L11
  1935  01DF  0279               	subwf	_uSecond+1,w
  1936  01E0  305F               	movlw	95
  1937  01E1  1903               	skipnz
  1938  01E2  0278               	subwf	_uSecond,w
  1939  01E3  1C03               	btfss	3,0
  1940  01E4  299B               	goto	i1l1982
  1941  01E5  3000               	movlw	0
  1942  01E6                     L11:	
  1943  01E6  0279               	subwf	_uSecond+1,w
  1944  01E7  3060               	movlw	96
  1945  01E8  1903               	skipnz
  1946  01E9  0278               	subwf	_uSecond,w
  1947  01EA  1803               	btfsc	3,0
  1948  01EB  29BC               	goto	i1l1996
  1949  01EC  2A0C               	goto	i1l7812
  1950  01ED                     i1l2020:	
  1951                           ;ivector.c: 92: case 5:
  1952                           
  1953                           
  1954                           ;ivector.c: 93: RB3 = 0, RB2 = 0;
  1955                           
  1956                           ;ivector.c: 94: uSecond < 95 ? RB0 = 1, RB1 = 0: RB0 = 1, RB1 = 1;
  1957  01ED  2223  118A         	fcall	PL4	;call to abstracted procedure
  1958  01EF  1903               	skipnz
  1959  01F0  0278               	subwf	_uSecond,w
  1960  01F1  1C03               	btfss	3,0
  1961  01F2  29BC               	goto	i1l1996
  1962  01F3                     i1l2022:	
  1963  01F3  1406               	bsf	6,0
  1964  01F4                     L2:	
  1965  01F4  1486               	bsf	6,1
  1966  01F5  2A0C               	goto	i1l7812
  1967  01F6                     i1l2025:	
  1968                           ;ivector.c: 99: case 6:
  1969                           
  1970                           
  1971                           ;ivector.c: 100: RB3 = 0, RB2 = 0;
  1972                           
  1973                           ;ivector.c: 101: uSecond < 95 ? RB0 = 0, RB1 = 1: RB0 = 1, RB1 = 1;
  1974  01F6  2223  118A         	fcall	PL4	;call to abstracted procedure
  1975  01F8  1903               	skipnz
  1976  01F9  0278               	subwf	_uSecond,w
  1977  01FA  1C03               	btfss	3,0
  1978  01FB  2999               	goto	i1l1986
  1979  01FC  29F3               	goto	i1l2022
  1980  01FD                     i1l7806:	
  1981                           
  1982                           ;ivector.c: 126: status = 5;
  1983  01FD  3005               	movlw	5
  1984  01FE  00B2               	movwf	_status
  1985                           
  1986                           ;ivector.c: 127: break;
  1987  01FF  2A0C               	goto	i1l7812
  1988  0200                     i1l7810:	
  1989  0200  0832               	movf	_status,w
  1990                           
  1991                           ; Switch size 1, requested type "space"
  1992                           ; Number of cases is 8, Range of values is 0 to 7
  1993                           ; switch strategies available:
  1994                           ; Name         Instructions Cycles
  1995                           ; direct_byte           23     7 (fixed)
  1996                           ; simple_byte           25    13 (average)
  1997                           ; jumptable            260     6 (fixed)
  1998                           ; rangetable            12     6 (fixed)
  1999                           ; spacedrange           22     9 (fixed)
  2000                           ; locatedrange           8     3 (fixed)
  2001                           ;	Chosen strategy is direct_byte
  2002  0201  0084               	movwf	4
  2003  0202  3008               	movlw	8
  2004  0203  0204               	subwf	4,w
  2005  0204  1803               	skipnc
  2006  0205  29FD               	goto	i1l7806
  2007  0206  3002               	movlw	high i1S8366
  2008  0207  008A               	movwf	10
  2009  0208  1003               	clrc
  2010  0209  0D04               	rlf	4,w
  2011  020A  3EA8               	addlw	low i1S8366
  2012  020B  0082               	movwf	2
  2013  020C                     i1l7812:	
  2014                           
  2015                           ;ivector.c: 129: }
  2016                           ;ivector.c: 133: TMR0 = 99;
  2017  020C  3063               	movlw	99
  2018  020D  0081               	movwf	1	;volatile
  2019                           
  2020                           ;ivector.c: 134: T0IF = 0;
  2021  020E  110B               	bcf	11,2
  2022                           
  2023                           ;ivector.c: 135: INTF = 0;
  2024  020F  108B               	bcf	11,1
  2025  0210  0873               	movf	??_clock+2,w
  2026  0211  008A               	movwf	10
  2027  0212  0872               	movf	??_clock+1,w
  2028  0213  0084               	movwf	4
  2029  0214  0E71               	swapf	??_clock^(0+-128),w
  2030  0215  0083               	movwf	3
  2031  0216  0EFE               	swapf	126,f
  2032  0217  0E7E               	swapf	126,w
  2033  0218  0009               	retfie
  2034  0219                     __end_of_clock:	
  2035  0219                     PL2:	
  2036  0219  3000               	movlw	0
  2037  021A  1186               	bcf	6,3
  2038  021B  1106               	bcf	6,2
  2039  021C  0279               	subwf	_uSecond+1,w
  2040  021D  3405               	retlw	5
  2041  021E                     PL3:	
  2042  021E  0279               	subwf	_uSecond+1,w
  2043  021F  300B               	movlw	11
  2044  0220  1903               	skipnz
  2045  0221  0278               	subwf	_uSecond,w
  2046  0222  3400               	retlw	0
  2047  0223                     PL4:	
  2048  0223  3000               	movlw	0
  2049  0224  1186               	bcf	6,3
  2050  0225  1106               	bcf	6,2
  2051  0226  0279               	subwf	_uSecond+1,w
  2052  0227  345F               	retlw	95
  2053                           
  2054                           	psect	intentry
  2055  0004                     __pintentry:	
  2056                           ; Regs used in _clock: [wreg-fsr0h+status,2+status,0]
  2057                           
  2058  0004                     interrupt_function:	
  2059  007E                     saved_w	set	btemp
  2060  0004  00FE               	movwf	btemp
  2061  0005  0E03               	swapf	3,w
  2062  0006  00F1               	movwf	??_clock
  2063  0007  0804               	movf	4,w
  2064  0008  00F2               	movwf	??_clock+1
  2065  0009  080A               	movf	10,w
  2066  000A  00F3               	movwf	??_clock+2
  2067  000B  118A  2953         	ljmp	_clock
  2068                           
  2069                           	psect	swtext1
  2070  02A8                     __pswtext1:	
  2071  02A8                     i1S8366:	
  2072  02A8  118A  297A         	ljmp	i1l1980
  2073  02AA  118A  29BF         	ljmp	i1l1999
  2074  02AC  118A  29C8         	ljmp	i1l2009
  2075  02AE  118A  29C5         	ljmp	i1l2004
  2076  02B0  118A  29CE         	ljmp	i1l2014
  2077  02B2  118A  29ED         	ljmp	i1l2020
  2078  02B4  118A  29F6         	ljmp	i1l2025
  2079  02B6  118A  299D         	ljmp	i1l1990
  2080                           
  2081                           	psect	text545
  2082  0000                     __ptext545:	
  2083 ;; =============== function _clock ends ============
  2084                           
  2085  007E                     btemp	set	126	;btemp
  2086  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Thu Jul 19 14:05:02 2018

                      pc 0002                       _BF 04A0                       _GO 00F9  
                     fsr 0004                      _GIE 005F                      l989 0000  
                    _RB0 0030                      _RB1 0031                      _RB2 0032  
                    _RB3 0033                      _RA7 002F                      _PEN 048A  
                    _SEN 0488                      u775 028D                      fsr0 0004  
                    indf 0000               _CheckSspif 0112                     l6002 0000  
                   l6005 011F                     l6013 005B                     l6021 00B7  
                   l6030 00DF                     l6026 00CA                     l8120 0000  
                   l8106 0000                     l8130 0108                     l8210 0000  
                   l8116 0000                     l8132 0000                     l8124 0000  
                   l8204 0150                     l8220 0000                     l8212 0000  
                   l8300 0000                     l8118 0000                     l8150 012E  
                   l8142 0000                     l8206 0000                     l8310 0000  
                   l8302 0000                     l3983 0272                     l8152 0000  
                   l8136 0000                     l8224 00C7                     l8216 0000  
                   l8312 0000                     l8304 0000                     l8320 0000  
                   l3985 0278                     l8154 0000                     l8138 0000  
                   l8170 0000                     l8218 00C3                     l8314 0000  
                   l8306 0000                     l8322 0000                     l3987 0000  
                   l8180 0000                     l8164 0000                     l8236 00D7  
                   l8228 0000                     l8316 0000                     l8308 0000  
                   l8340 0000                     l8332 0235                     l8324 0000  
                   l4982 02BB                     l8182 0000                     l8174 0000  
                   l8166 0000                     l8238 0000                     l8246 0044  
                   l8342 0000                     l8334 0000                     l8326 0231  
                   l8318 0000                     l8192 013C                     l8272 0000  
                   l8280 0000                     l8344 0000                     l8336 0000  
                   l4985 0000                     l8178 006B                     l8194 0000  
                   l8274 0000                     l8258 0000                     l8290 0000  
                   l8282 0000                     l7724 0000                     l8292 0000  
                   l8284 0000                     l8198 0000                     l8294 0000  
                   l8286 0000                     l8278 0000                     l8296 0000  
                   l8288 0000                     l7850 0000                     l7834 0000  
                   l8298 0000                     l5995 0141                     l7852 0000  
                   l7836 0000                     l5988 00F9                     _ADON 00F8  
                   l7854 0000                     l7846 027B                     l7838 0000  
                   l7856 0000                     l7848 0000                     _T0IF 005A  
                   u1205 024E                     u1217 023B                     u1227 00E4  
                   _IOCB 0096                     u1237 006F                     u1247 0132  
                   u1257 010C                     u1267 026E                     u1277 027D  
                   u1287 0294                     _INTF 0059                     _RCEN 048B  
                   _TMR0 0001                     _WPUB 0095                     _main 0228  
                   _init 000F                     btemp 007E                     start 000D  
        __end_of_i2cStop 0153               _DeviceData 0033                    ?_main 0024  
                  _ACKEN 048C                    _ACKDT 048D                    ?_init 0071  
                  _ANSEL 0188                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _SSPIF 0063                    _SSPOV 00A6  
             _i2cAddress 0116               _i2cGetByte 00B1                    _clock 0153  
                  main@i 002A                    pclath 000A               _i2cPutByte 0055  
                  status 0003                    wtemp0 007E             __end_of_main 0269  
           __end_of_init 0044         __end_of_i2cStart 0112                   ??_main 0028  
                 ??_init 0077     __size_of_breakToLoop 0008                   ?_clock 0071  
                 _ADCON0 001F                   _ADCON1 009F                   _ADRESH 001E  
                 _ADRESL 009E                   i1S8366 02A8              ?_CheckSspif 0071  
                 _ANSELH 0189                   i1l2020 01ED                   i1l2004 01C5  
                 i1l2022 01F3                   i1l2014 01CE                   i1l2031 0000  
                 i1l2025 01F6                   i1l2009 01C8                   i1l1980 017A  
                 i1l1990 019D                   i1l1982 019B                   i1l1974 0159  
                 i1l1986 0199                   i1l1996 01BC                   i1l1999 01BF  
                 i1l7802 0000                   i1l7810 0200                   i1l7730 0000  
                 i1l7740 0000                   i1l7812 020C                   i1l7814 0000  
                 i1l7806 01FD                   i1l7742 0000                   i1l7816 0000  
                 i1l7752 0000                   i1l7736 0000                   i1l7762 0000  
                 i1l7746 0000                   i1l7780 0000                   i1l7772 0000  
                 i1l7748 0000                   i1l7784 0000                   i1l7776 0000  
                 _INTCON 000B                   i1l7798 0000                   _OSCCON 008F  
                 _SSPADD 0093                   _SSPCON 0014                   _SSPBUF 0013  
              ??_i2cStop 0074                   _getAdc 02B8                   _minute 002E  
                 _second 0030                   _status 0032              ?_i2cAddress 0074  
                 saved_w 007E              ?_i2cGetByte 0071         __end_of_pushByte 0298  
            ?_i2cPutByte 0071               _adcRestart 0044           __pcstackCOMMON 0071  
          __end_of_clock 0219      __size_of_CheckSspif 0004                  ??_clock 0071  
             __pbssBANK0 002C                ?_i2cStart 0071      __size_of_i2cAddress 0026  
             __pmaintext 0228      __size_of_i2cGetByte 003A                  ?_getAdc 0074  
             __pintentry 0004                  _ACKSTAT 048E      __size_of_i2cPutByte 0024  
__size_of_getExternalAdc 0038                  _SSPCON2 0091                  _SSPSTAT 0094  
             ??_i2cStart 0074                  _i2cStop 013C              ?_adcRestart 0071  
              ?_pushByte 0071          __size_of_getAdc 000C                  _uSecond 0078  
           ??_CheckSspif 0074     end_of_initialization 02A5               ??_pushByte 0074  
          ??_breakToLoop 0074       __end_of_CheckSspif 0116                _PORTBbits 0006  
           ??_i2cAddress 0075      __size_of_adcRestart 0011             ??_i2cGetByte 0074  
           ??_i2cPutByte 0074       __end_of_i2cAddress 013C       __end_of_i2cGetByte 00EB  
         __end_of_getAdc 02C4             _counti2cloop 002C       __end_of_i2cPutByte 0079  
         _getExternalAdc 0079      start_initialization 0298      __end_of_breakToLoop 00F3  
      __size_of_i2cStart 001F        i2cAddress@address 0074                 ??_getAdc 0076  
     getExternalAdc@data 0021   __end_of_getExternalAdc 00B1              __pbssCOMMON 0078  
          __pcstackBANK0 0020                 ?_i2cStop 0071             ??_adcRestart 0077  
              __ptext531 0000                __ptext540 0269                __ptext532 000F  
              __ptext541 0112                __ptext533 0079                __ptext542 00EB  
              __ptext534 0044                __ptext543 02B8                __ptext535 00B1  
              __ptext544 0153                __ptext536 013C                __ptext545 0000  
              __ptext537 0055                __ptext538 0116                __ptext539 00F3  
        i2cPutByte@bytes 0075              _breakToLoop 00EB        __size_of_pushByte 002F  
              __pswtext1 02A8          ?_getExternalAdc 0071       __end_of_adcRestart 0055  
         __size_of_clock 00C6        interrupt_function 0004           i2cGetByte@data 0076  
               _i2cStart 00F3            i2cAddress@w_r 0076         __size_of_i2cStop 0017  
          __size_of_main 0041            __size_of_init 0035                 _pushByte 0269  
               main@argc 0024                 main@argv 0026            i2cGetByte@ack 0075  
              pushByte@b 0075                pushByte@i 0076                 intlevel1 0000  
       ??_getExternalAdc 0077             ?_breakToLoop 0071               _OPTION_REG 0081  
  getExternalAdc@outData 0020  
